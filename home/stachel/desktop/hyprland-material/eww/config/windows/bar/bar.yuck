(deflisten workspaces :initial "[]" "bash ./scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ./scripts/get-active-workspace")
(defpoll time :interval "1s"
  "date '+%H:%M'")
(defpoll battery :initial "{\"capacity\": \"0\"\, \"icon\": \"󰁹\", \"state\": \"\"}" :interval "3s" "bash ./scripts/battery-helper")
(defvar status_index 0)

(defwindow bar
  :monitor 0
  :geometry (geometry :width "100%" :height "4.5%" :x "0%" :y "0%" :anchor "top center")
  :stacking "bg"
  :exclusive true
  :class "window-bar"
  (centerbox :orientation "h"
    (workspaces)
    (status)
    (menu)
    )
  )

(defwidget workspaces []
  (eventbox :onscroll "bash ./scripts/change-active-workspace {} ${current_workspace}"
    (box :class "workspaces-widget" 
         :space-evenly true
         :orientation "h"
         :halign "start"
         :spacing 10
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}" :class "workspace-entry-eventbox"
          (box :valign "center" :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}")
          )
        )
      )
    )
  )

(defwidget launcher []
  (button :class "launcher-button"
          :onclick "echo test"
    (box :class "launcher-button-icon"
         :halign "center"
         :valign "center"
         :hexpand true
         :vexpand true
         )
    )
  )

(defwidget status []
  (eventbox :onclick "eww update status_index=${status_index < 3 ? status_index + 1 : status_index}"
            :onrightclick "eww update status_index=${status_index > 0 ? status_index - 1 : status_index}"
    (box :class "status-widget"
         :orientation "h"
         (stack :selected status_index
                :transition "slideup"
                :same-size false
                (box :class "time-widget status-widget-entry"
                     :space-evenly false
                     :spacing 10
                     (box :class "status-icon"
                          :halign "start" "󰥔")
                     (box :class "content"
                          :hexpand true
                          time)
                     )
                ; Idea: Some kind of progress, maybe with circular-progress
                (box :class "music-widget status-widget-entry"
                     :space-evenly false
                     :spacing 10
                     (box :class "status-icon" 
                          :halign "start" "󰝚")
                     (box :class "content"
                          :hexpand true
                          "Lorem ipsum dolor sit amet")
                     )
                (circular-progress :class "progress" :value 60.0 :start-at 0.0 :clockwise true "Test text")
                )
         )
    )
  )

(defwidget menu []
  (centerbox :orientation "h"
       :class "menu-widget"
       :halign "end"
    (box :class "menu-entry first-entry" "  ")
    (box :class "menu-entry second-entry" "ENG")
    (box :class "menu-entry third-entry" 
         :space-evenly false
         (box :class "icon ${battery.state}" :halign "center" {battery.icon})
         (box :class "text" :halign "center" "${battery.capacity}%")
    )
  )
)
