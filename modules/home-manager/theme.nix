{ pkgs
, lib
, config
, inputs
, ...
} @ args:
let
  cfg = config.theme;
  osCfg = args.osConfig.programs.matugen or { };

  configFormat = pkgs.formats.toml { };

  # don't use ~, use $HOME
  sanitizedTemplates =
    builtins.mapAttrs
      (_: v: {
        input_path = v.input_path;
        output_path = builtins.replaceStrings [ "~" ] [ "$HOME" ] v.output_path;
      })
      cfg.templates;

  matugenConfig = configFormat.generate "matugen-config.toml" {
    config = { };
    templates = sanitizedTemplates;
  };

  # get matugen package
  pkg = inputs.matugen.packages.${pkgs.system}.default;

  themePackage = pkgs.runCommandLocal "matugen-themes-${cfg.variant}" { } ''
    mkdir -p $out
    cd $out
    export HOME=$(pwd)
    
    ${pkg}/bin/matugen \
      image ${cfg.wallpaper} \
      ${
      if cfg.templates != {}
      then "--config ${matugenConfig}"
      else ""
    } \
      --mode ${cfg.variant} \
      --type ${cfg.type} \
      --json ${cfg.jsonFormat} \
      --quiet \
      > $out/theme.json
  '';
  colors = builtins.fromJSON (builtins.readFile "${themePackage}/theme.json");
in
{
  options.theme = {
    enable = lib.mkEnableOption "Matugen declarative theming";

    wallpaper = lib.mkOption {
      description = "Path to `wallpaper` that matugen will generate the colorschemes from";
      type = lib.types.path;
      default = osCfg.wallpaper or "${pkgs.nixos-artwork.wallpapers.simple-blue}/share/backgrounds/nixos/nix-wallpaper-simple-blue.png";
      defaultText = lib.literalExample ''
        "${pkgs.nixos-artwork.wallpapers.simple-blue}/share/backgrounds/nixos/nix-wallpaper-simple-blue.png"
      '';
    };

    templates = lib.mkOption {
      type = with lib.types;
        attrsOf (submodule {
          options = {
            input_path = lib.mkOption {
              type = path;
              description = "Path to the template";
              example = "./style.css";
            };
            output_path = lib.mkOption {
              type = str;
              description = "Path where the generated file will be written to";
              example = "~/.config/sytle.css";
            };
          };
        });
      default = osCfg.templates or { };
      description = ''
        Templates that have `@{placeholders}` which will be replaced by the respective colors.
        See <https://github.com/InioX/matugen/wiki/Configuration#example-of-all-the-color-keywords> for a list of colors.
      '';
    };

    type = lib.mkOption {
      description = "Palette used when generating the colorschemes.";
      type = lib.types.enum [ "scheme-content" "scheme-expressive" "scheme-fidelity" "scheme-fruit-salad" "scheme-monochrome" "scheme-neutral" "scheme-rainbow" "scheme-tonal-spot" ];
      default = osCfg.palette or "scheme-tonal-spot";
      example = "triadic";
    };

    jsonFormat = lib.mkOption {
      description = "Color format of the colorschemes.";
      type = lib.types.enum [ "rgb" "rgba" "hsl" "hsla" "hex" "strip" ];
      default = osCfg.jsonFormat or "strip";
      example = "rgba";
    };

    variant = lib.mkOption {
      description = "Colorscheme variant.";
      type = lib.types.enum [ "light" "dark" "amoled" ];
      default = osCfg.variant or "dark";
      example = "light";
    };

    files = lib.mkOption {
      type = lib.types.path;
      readOnly = true;
      default = themePackage;
      description = "Generated theme files. Including only the variant chosen.";
    };

    theme.colors = lib.mkOption {
      inherit (pkgs.formats.json { }) type;
      readOnly = true;
      default =
        if builtins.hasAttr "templates" osCfg
        then
          if cfg.templates != osCfg.templates
          then colors
          else osCfg.theme.colors
        else colors;
      description = "Generated theme colors. Includes all variants.";
    };

    colors = lib.mkOption {
      inherit (pkgs.formats.json { }) type;
      readOnly = true;
      default = cfg.theme.colors.colors.${cfg.variant};
      description = "Material You colors generated by Matugen";
    };
  };
}
